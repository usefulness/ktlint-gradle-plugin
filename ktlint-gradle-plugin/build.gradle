import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id("java-gradle-plugin")
    id("com.starter.publishing")
    alias(libs.plugins.gradle.pluginpublish)
    alias(libs.plugins.starter.library.kotlin)
    alias(libs.plugins.kotlinx.binarycompatibilityvalidator)
}

description = "Lint and formatting for Kotlin using ktlint with configuration-free setup on JVM and Android projects"

configurations {
    register("testRuntimeDependencies") {
        attributes {
            // KGP publishes multiple variants https://kotlinlang.org/docs/whatsnew17.html#support-for-gradle-plugin-variants
            attribute(Usage.USAGE_ATTRIBUTE, project.objects.named(Usage.class, Usage.JAVA_RUNTIME))
            attribute(Category.CATEGORY_ATTRIBUTE, project.objects.named(Category.class, Category.LIBRARY))
        }
    }
}

jacoco {
    toolVersion = "0.8.12"
}

dependencies {
    compileOnly(libs.kotlin.gradle.api)
    compileOnly(libs.agp.gradle)
    compileOnly(libs.ktlint.rule.engine)
    compileOnly(libs.ktlint.cli.ruleset.core)
    compileOnly(libs.ktlint.cli.reporter.core)
    compileOnly(libs.ktlint.cli.reporter.baseline)

    testRuntimeOnly(libs.junit.jupiter.engine)
    testRuntimeOnly(libs.junit.platform.launcher)

    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.commons.io)
    testImplementation(libs.assertj.core)

    testRuntimeDependencies(libs.kotlin.gradle.impl)
    testRuntimeDependencies(libs.agp.gradle)
    testRuntimeDependencies(libs.google.ksp.gradle)
}

kotlin {
    explicitApi()
}

tasks.register("generateVersionProperties", WriteProperties) { writeProps ->
    def propertiesFile = new File(sourceSets.main.output.resourcesDir, "ktlint-gradle-plugin.properties")
    if (GradleVersion.current() >= GradleVersion.version("8.1")) {
        writeProps.destinationFile = propertiesFile
    } else {
        //noinspection GrDeprecatedAPIUsage
        writeProps.outputFile = propertiesFile
    }
    writeProps.property("kltint_gradle_plugin_version", provider { version })
    writeProps.property("ktlint_version", libs.versions.maven.ktlint)
}

tasks.named("processResources") {
    dependsOn("generateVersionProperties")
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        apiVersion = KotlinVersion.KOTLIN_1_8
        languageVersion = KotlinVersion.KOTLIN_1_8
    }
}
tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

// Required to put the Kotlin plugin on the classpath for the functional test suite
tasks.withType(PluginUnderTestMetadata).configureEach {
    pluginClasspath.from(configurations.testRuntimeDependencies)
}

gradlePlugin {
    plugins {
        create("ktlintPlugin") {
            id = "io.github.usefulness.ktlint-gradle-plugin"
            displayName = "ktlint Gradle plugin"
            description = project.description
            tags.addAll(["kotlin", "ktlint", "lint", "format", "style", "android"])
            implementationClass = "io.github.usefulness.KtlintGradlePlugin"
        }
    }
}
